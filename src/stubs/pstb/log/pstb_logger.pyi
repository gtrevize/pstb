import logging
from collections.abc import Generator

from _typeshed import Incomplete

logger: Incomplete

class DatabaseHandler(logging.Handler):
    def __init__(
        self,
        db_filename: Incomplete | None = ...,
        log_name: Incomplete | None = ...,
        formatter: Incomplete | None = ...,
    ) -> None: ...
    conn: Incomplete
    cursor: Incomplete
    def connect_to_database(self) -> None: ...
    def emit(self, record) -> None: ...
    def close(self) -> None: ...
    @property
    def log_name(self): ...
    @log_name.setter
    def log_name(self, name) -> None: ...
    @property
    def db_filename(self): ...
    @db_filename.setter
    def db_filename(self, filename) -> None: ...

class SuppressRepeatFilter(logging.Filter):
    def __init__(self, max_repetitions: Incomplete | None = ...) -> None: ...
    def filter(self, record): ...
    @property
    def max_repetitions(self): ...
    @max_repetitions.setter
    def max_repetitions(self, repetitions) -> None: ...

def setup_logger(): ...
def set_default_handler(handler) -> None: ...
def set_log_level(level) -> None: ...
def set_temporary_level(new_level) -> Generator[None, None, None]: ...
def get_log_level(): ...
def set_log_level_debug() -> None: ...
def set_log_level_info() -> None: ...
def set_log_level_warning() -> None: ...
def set_log_level_error() -> None: ...
def set_log_level_critical() -> None: ...
def set_output_to_console() -> None: ...
def set_output_to_file(file_path) -> None: ...
def set_output_to_database(db_filename) -> None: ...
def add_output_to_console() -> None: ...
def add_output_to_file(file_path) -> None: ...
def add_output_to_database(
    db_filename, log_name: Incomplete | None = ..., formatter: Incomplete | None = ...
) -> None: ...
